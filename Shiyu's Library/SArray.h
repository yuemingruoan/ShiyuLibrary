/*------------------------------
作者1:时雨
作者邮箱：270598250@qq.com
作者2：X
作者邮箱：2817548451@qq.com
用途：收录一些与数组操作有关的函数
创建时间：2022年1月13日;
引用的支持库：
	1.httplib
	2.nlohmann json
------------------------------*/
#include<iostream>
#include<string>
#include<vector>
using namespace std;

class SArray
{
public:
	//排序方法
	enum class SortMethod
		: int
	{
		BubbleSort = 1,	//冒泡排序
		SelectionSort,	//选择排序
		InsertionSort,	//插入排序
		ShellSort,		//希尔排序
		MergeSort,		//归并排序
		QuickSort,		//快速排序
		TimSort,		//Tim 排序
	};


	SArray();
	/*--------------------------------------------
	函数用处： 用一个数组初始化这个数组类;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.13;
	是否完整：是;
	参数一 浮点型 否 数组;
	参数二 整型  否 数组大小;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	SArray(double* arr, int size);

	/*--------------------------------------------
	函数用处： 用一个vector容器初始化这个数组类;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.13;
	是否完整：是;
	参数 vector容器 否 容器;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	SArray(const vector<double>& v);

	/*--------------------------------------------
	函数用处： 用一堆数字初始化这个数组类;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.13;
	是否完整：是;
	参数 浮点数组 否 一堆数,要多少传进来;
	当前存在BUG: 无;
	注意事项： 要用大括号括起来喵 像这样: SArray({1, 2, 3, 2, 1});
	-------------------------------------------*/
	SArray(initializer_list<double> l);

	~SArray();
public:
	/*--------------------------------------------
	函数用处： 用一个数组初始化这个数组类;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.13;
	是否完整：是;
	当前存在BUG: 无;
	参数一 浮点型 否 数组;
	参数二 整型 否 数组大小;
	返回值     void;
	注意事项： 如果原先有数据会被覆盖掉;
	-------------------------------------------*/
	void init(double* arr, int size);

	/*--------------------------------------------
	函数用处： 用一个vector容器初始化这个数组类;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.13;
	是否完整：是;
	当前存在BUG: 无;
	参数 vector容器 否 容器;
	返回值     void ;
	注意事项： 如果原先有数据会被覆盖掉;
	-------------------------------------------*/
	void init(const vector<double>& v);

	/*--------------------------------------------
	函数用处： 用一堆数初始化这个数组类;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	参数 浮点型数组 否 一堆数;
	返回值     void ;
	当前存在BUG: 无;
	注意事项： 原来的数据会清空, 使用时要用大括号括起来, 像:arr.init({1, 2, 3, 2, 1});
	-------------------------------------------*/
	void init(initializer_list<double> l);

	/*--------------------------------------------
	函数用处： 改变数组的排序方式;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	参数 排序方式枚举类 否 想选择的排序方式;
	返回值     void ;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	void setSortMethod(SortMethod sm);

	/*--------------------------------------------
	函数用处： 在数组开头增加一个新的元素;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	参数 浮点型 否 要增加的数
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	void addFront(double d);

	/*--------------------------------------------
	函数用处： 在数组末尾增加一个新的元素;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	参数 浮点型 否 要添加的数;
	返回值     void ;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	void addBack(double d);

	/*--------------------------------------------
	函数用处： 获得数组头头的元素;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	返回值  浮点型 头元素的数值 ;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	double getFront();

	/*--------------------------------------------
	函数用处： 获得数组末尾的元素
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	返回值   浮点型 尾元素的数值 ;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	double getBack();

	/*--------------------------------------------
	函数用处： 删除数组开头的元素
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	返回值     void ;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	void delFront();

	/*--------------------------------------------
	函数用处： 删除数组结尾的元素
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	返回值     void ;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	void delBack();

	/*--------------------------------------------
	函数用处： 删除下标为 i 的元素
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：否 没有判断索引是否合理;
	参数 整型 否 要删除的元素的下标;
	返回值     void ;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	void del(int i);

	/*--------------------------------------------
	函数用处： 删除下标为 [a, b) 的元素
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：否 没有判断索引是否合理;
	参数一 整型 否 区间的左端点;
	参数二 整型 否 区间的右端点;
	返回值     void ;
	当前存在BUG: 无;
	注意事项： 删除的是一大片范围,区间是左闭右开的(就是a会被删掉b不会吖);
	-------------------------------------------*/
	void del(int a, int b);

	/*--------------------------------------------
	函数用处： 获得数组大小
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：是;
	返回值  整型 数组大小 ;
	当前存在BUG: 无;
	注意事项： 喵;
	-------------------------------------------*/
	size_t size();

	/*--------------------------------------------
	函数用处： 打印数组的值;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.13;
	是否完整：是;
	参数 字符串型 是 添加在输出末尾的,默认为换行;
	当前存在BUG: 无;
	返回值     void ;
	注意事项： 喵;
	-------------------------------------------*/
	void print(string end = "\n");

	/*--------------------------------------------
	函数用处： 对数组内元素从小到大排序(升序);
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.13;
	是否完整：是;
	当前存在BUG: 无;
	返回值     void ;
	注意事项： 喵;
	-------------------------------------------*/
	void sortAscend();

	/*--------------------------------------------
	函数用处： 对数组内元素从大到小排序(将序);
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.13;
	是否完整：是;
	当前存在BUG: 无;
	返回值     void ;
	注意事项： 喵;
	-------------------------------------------*/
	void sortDescend();

public:
	/*OPERATORS*/
	
	/*--------------------------------------------
	函数用处： 用来操作数组某一项;
	创建者： X;
	作者邮箱： 2817548451@qq.com;
	编写时间： 2023.1.14;
	是否完整：否;
	当前存在BUG: 无;
	注意事项： 如果访问越界了会抛出异常;
	-------------------------------------------*/
	double& operator[](int index);

private:
	vector<double> _data;
	SortMethod _sm;
};

